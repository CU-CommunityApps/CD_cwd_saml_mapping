<?php

use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * @file
 * Primary module hooks for cwd_saml_mapping module.
 */
function cwd_saml_mapping_saml_sp_drupal_login_user_attributes_alter($user, $attributes) {
  //-------------------------------------------------------------------------------------
  // Logic for adding and removing users from roles via saml_role_mapping config entities
  //-------------------------------------------------------------------------------------
  //Get all our saml_role_mapping configs for processing
  $entity_ids = \Drupal::entityQuery('saml_role_mapping')->condition('status',1)->execute();
  $configs = \Drupal::entityTypeManager()->getStorage('saml_role_mapping')->loadMultiple($entity_ids);

  //Variables for storing data and signaling a user save is needed.
  $saveUser = false;
  $samlManagedRoles = [];
  $userRolesToAdd = [];
  
  foreach($configs as $role_assigment_config) {
    //Create a list of all roles managed by saml properties
    $role = $role_assigment_config->get('role');
    if(!in_array($role,$samlManagedRoles)) {
      $samlManagedRoles[] = $role;
    }

    //Property in saml we are looking at
    $samlprop = $role_assigment_config->get('samlprop');

    //Drupal's accepted values we configure on our end
    $values = explode("\r\n",$role_assigment_config->get('values'));
    
    //This condition should catch a miss-configuarion of a saml mapping
    if(array_key_exists($samlprop,$attributes) && is_null($attributes[$samlprop])) {
      continue;
    }

    //If saml attribute has more than one value in a field we will look at all values
    if(count($attributes[$samlprop]) > 1) {
      $saml_pro_data = $attributes[$samlprop];
      $needsRole = count(array_intersect($saml_pro_data,$values)) > 0;
    } else {
      //All others we look for a single value in our accepted values for the SAML property
      $saml_pro_data = $attributes[$samlprop][0];
      $needsRole = in_array($saml_pro_data,$values);
    }

    //If condition is met to add this role add to our array for processing after all configs have been evaluated
    if($needsRole) {
      $userRolesToAdd[] = $role;
    }
  } // end of for loop processing saml_role_mapping configs

  //Take and add roles to user as needed
  foreach($userRolesToAdd as $roleToAdd) {
    if (!$user->hasRole($roleToAdd)) {
      $user->addRole($roleToAdd);
      $saveUser = true;
    }  
  }

  //Compute roles we need to take away and remove if needed
  $userRolesToRemove = array_diff($samlManagedRoles,$userRolesToAdd);
  foreach ($userRolesToRemove as $roleToRemove) {
    if ($user->hasRole($roleToRemove)) {
      $user->removeRole($roleToRemove);
      $saveUser = true;
    }
  }
  //-------------------------------------------------------------------------------------
  // End of role logic
  //-------------------------------------------------------------------------------------


  //-------------------------------------------------------------------------------------
  // Logic for mapping data SAML into user fields
  //-------------------------------------------------------------------------------------
  // TBD - but similar to saml_role_mapping
  //-------------------------------------------------------------------------------------
  // End of mapping data SAML into user fields
  //-------------------------------------------------------------------------------------


  //-------------------------------------------------------------------------------------
  //Save user is we need to retain changes
  //-------------------------------------------------------------------------------------
  if($saveUser) {
    $user->save();
  }
  //-------------------------------------------------------------------------------------
  // End save user logic
  //-------------------------------------------------------------------------------------

}

function cwd_saml_mapping_preprocess_item_list(&$variables) {
  //If we are not on the user login page abandon this hook.
  $current_route_name = \Drupal::service('current_route_match')->getRouteName();
  if($current_route_name != "user.login") {
    return;
  }

  //Look at our global moduel config to see if we use prod saml in production Pantheon
  $config = \Drupal::config('cwd_saml_mapping.config_form');
  $use_saml_in_prod = $config->getRawData()['use_prod_in_saml'];
  if (isset($_ENV['PANTHEON_ENVIRONMENT']) && $_ENV['PANTHEON_ENVIRONMENT'] === 'live' && $use_saml_in_prod) {
    //Loop through links and remove ones that contain 'test'
    foreach ($variables['items'] as $index => $link) {
      $idp_name = $link['value']->getText()->getArguments()['%idp'] ?? null;
      if ($idp_name && str_contains("test", strtolower(($idp_name)))) {
        unset($variables['items'][$index]);
      }
    }
  } else {
    //Loop through links and remove ones that contain 'prod'
    foreach($variables['items'] as $index => $link) {
      $idp_name = $link['value']->getText()->getArguments()['%idp'] ?? null;
      if($idp_name && str_contains(strtolower(($idp_name)), "prod")) {
        unset($variables['items'][$index]);
      }
    }
  }
}

//Remove local login form?
// function cwd_saml_mapping_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//   if($form_id == 'user_login_form') {
//     unset($form['#submit']);
//     unset($form['name']);
//     unset($form['pass']);
//     unset($form['actions']);
//   }
// }
